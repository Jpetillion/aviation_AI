import { serialiseAsDict } from "./serde.mjs";
import { stream } from "hono/streaming";
import { StreamingApi } from "hono/utils/stream";
export function jsonExtra(c, object) {
    return new Response(serialiseAsDict(object), {
        ...c.res,
        headers: { ...c.res.headers, "Content-Type": "application/json" },
    });
}
export function waitKeepAlive(c, promise) {
    return stream(c, async (stream) => {
        // keep sending newlines until we resolved the chunk
        let keepAlive = Promise.resolve();
        const timer = setInterval(() => {
            keepAlive = keepAlive.then(() => stream.write("\n"));
        }, 1000);
        const result = await promise;
        clearInterval(timer);
        await keepAlive;
        await stream.write(serialiseAsDict(result));
    });
}
export const getDisconnectAbortSignal = (c, stream) => {
    // https://github.com/honojs/hono/issues/1770
    stream.onAbort(() => { });
    return c.req.raw.signal;
};
