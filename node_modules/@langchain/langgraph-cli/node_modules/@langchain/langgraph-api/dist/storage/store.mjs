import { InMemoryStore as BaseMemoryStore, } from "@langchain/langgraph";
import { FileSystemPersistence } from "./persist.mjs";
const conn = new FileSystemPersistence(".langgraphjs_api.store.json", () => ({
    data: new Map(),
    vectors: new Map(),
}));
class InMemoryStore extends BaseMemoryStore {
    async initialize(cwd) {
        await conn.initialize(cwd);
        await conn.with(({ data, vectors }) => {
            Object.assign(this, { data, vectors });
        });
        return conn;
    }
    async clear() {
        await conn.with(({ data, vectors }) => {
            data.clear();
            vectors.clear();
        });
    }
    async batch(operations) {
        return await conn.with(() => super.batch(operations));
    }
    async get(...args) {
        return await conn.with(() => super.get(...args));
    }
    async search(...args) {
        return await conn.with(() => super.search(...args));
    }
    async put(...args) {
        return await conn.with(() => super.put(...args));
    }
    async listNamespaces(...args) {
        return await conn.with(() => super.listNamespaces(...args));
    }
    toJSON() {
        // Prevent serialization of internal state
        return "[InMemoryStore]";
    }
}
export const store = new InMemoryStore();
