import { runnableConfigToCheckpoint } from "./utils/runnableConfig.mjs";
import { serializeError } from "./utils/serde.mjs";
const isStateSnapshot = (state) => {
    return "values" in state && "next" in state;
};
export const stateSnapshotToThreadState = (state) => {
    return {
        values: state.values,
        next: state.next,
        tasks: state.tasks.map((task) => ({
            id: task.id,
            name: task.name,
            error: task.error != null ? serializeError(task.error).message : null,
            interrupts: task.interrupts,
            path: task.path,
            // TODO: too many type assertions, check if this is actually correct
            checkpoint: task.state != null && "configurable" in task.state
                ? (task.state.configurable ?? null)
                : null,
            state: task.state != null && isStateSnapshot(task.state)
                ? stateSnapshotToThreadState(task.state)
                : null,
            // TODO: add missing result to the library
            // @ts-expect-error
            result: task.result ?? null,
        })),
        metadata: state.metadata,
        created_at: state.createdAt ? new Date(state.createdAt) : null,
        checkpoint: runnableConfigToCheckpoint(state.config),
        parent_checkpoint: runnableConfigToCheckpoint(state.parentConfig),
    };
};
